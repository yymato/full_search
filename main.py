import sys
import random
import requests
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QPixmap
from PyQt6.QtWidgets import QApplication, QLabel, QMainWindow, QPushButton, QVBoxLayout, QWidget
from untitled import Ui_MainWindow

# Список городов
CITIES = [
    "Москва", "Санкт-Петербург", "Новосибирск", "Екатеринбург", "Казань",
    "Нижний Новгород", "Челябинск", "Самара", "Ростов-на-Дону", "Уфа"
]

YANDEX_STATIC_MAPS_API = "https://static-maps.yandex.ru/1.x/"
YANDEX_GEOCODE_API = "http://geocode-maps.yandex.ru/1.x/"
YANDEX_GEOCODE_KEY = "8013b162-6b42-4997-9691-77b7074026e0"
# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt6 UI code generator 6.7.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.next_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.next_button.setGeometry(QtCore.QRect(0, 520, 331, 23))
        self.next_button.setObjectName("next_button")
        self.label = QtWidgets.QLabel(parent=self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 10, 771, 501))
        self.label.setObjectName("label")
        self.line_city = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.line_city.setGeometry(QtCore.QRect(340, 520, 441, 20))
        self.line_city.setObjectName("line_city")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.next_button.setText(_translate("MainWindow", "Следующий город"))
        self.label.setText(_translate("MainWindow", "TextLabel"))


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.city = ''
        self.next_button.clicked.connect(self.show_city)
        self.label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        self.rem_cities = CITIES.copy()
        random.shuffle(self.rem_cities)

        self.label.setScaledContents(True)

        self.show_city()

    def show_city(self):
        if self.check_right_answer():

            self.city = self.rem_cities.pop()
            coords = self.get_city_coords(self.city)
            if coords:
                self.display_map(coords)
        else:
            self.line_city.setText('Не верный ответ')

    def check_right_answer(self):
        if self.line_city.text().lower() == self.city.lower():
            return True
        else:
            return False

    @staticmethod
    def get_city_coords(city):
        params = {
            "apikey": YANDEX_GEOCODE_KEY,
            "geocode": city,
            "format": "json"
        }
        response = requests.get(YANDEX_GEOCODE_API, params=params)
        if not response:
            return None
        json_data = response.json()
        pos = json_data["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"]
        lon, lat = pos.split()
        return float(lon), float(lat)

    def display_map(self, coords):
        lon, lat = coords
        map_params = {
            "ll": f"{lon},{lat}",
            "z": 12,
            "l": "sat"
        }

        response = requests.get(YANDEX_STATIC_MAPS_API, params=map_params)
        print(response.reason)
        print(response.url)
        if not response:
            return

        with open("city.jpg", "wb") as f:
            f.write(response.content)

        pixmap = QPixmap("city.jpg")
        self.label.setPixmap(pixmap)


def except_hook(cls, exception, traceback):
    sys.__excepthook__(cls, exception, traceback)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    sys.excepthook = except_hook
    game_window = MainWindow()
    game_window.show()
    sys.exit(app.exec())
